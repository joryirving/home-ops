---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:
  talos:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos ...?
    cmds:
      - until talosctl --talosconfig {{.TALOS_DIR}}/talosconfig --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl --talosconfig {{.TALOS_DIR}}/talosconfig kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.CLUSTER_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info
      - talosctl --talosconfig {{.TALOS_DIR}}/talosconfig --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  apps:
    desc: Bootstrap Kubernetes Apps [CSI_DISK=required]
    prompt: Bootstrap Kubernetes Apps ...?
    cmds:
      - kubectl config set-cluster {{.CONTEXT}} --server https://{{.RANDOM_CONTROLLER}}:6443
      - defer: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.CLUSTER_DIR}}
      - until kubectl --context {{.CLUSTER}} wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      # - for: { var: BLOCK_DEVICES }
      #   cmd: talosctl --nodes {{.KEY}} wipe disk {{.ITEM}}
      - bash {{.SCRIPTS_DIR}}/bootstrap-apps.sh
    requires:
      vars: [CLUSTER, CSI_DISK]
    vars:
      BLOCK_DEVICES_FILTER: |-
        map(select(.spec.model == "{{.CSI_DISK}}"))
          | group_by(.node)
          | map({ (.[0].node): (map(.metadata.id) | join(" ")) })
          | add
      BLOCK_DEVICES_RESPONSE:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig get disks --output json | jq --compact-output --slurp '{{.BLOCK_DEVICES_FILTER}}'
      BLOCK_DEVICES:
        ref: fromJson .BLOCK_DEVICES_RESPONSE
      CONTEXT:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info --output json | jq --raw-output '.context'
      RANDOM_CONTROLLER:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    env:
      CSI_DISK: '{{.CSI_DISK}}'
      CLUSTER: '{{.CLUSTER}}'
      CLUSTER_APPS: '{{.CLUSTER_APPS}}'
      CLUSTER_DIR: '{{.CLUSTER_DIR}}'
      SHARED_APPS: '{{.SHARED_APPS}}'
      SHARED_DIR: '{{.SHARED_DIR}}'
    preconditions:
      - op whoami --format=json
      - talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info
      - talosctl --talosconfig {{.TALOS_DIR}}/talosconfig --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - test -f {{.SCRIPTS_DIR}}/bootstrap-apps.sh
      - test -f {{.TALOS_DIR}}/talosconfig
      - which helmfile jq kubectl op talosctl

  helmfile:
    desc: Bootstrap Cluster apps [CSI_DISK=required]
    dir: '{{.TALOS_DIR}}'
    summary: |
      IMPORTANT: CSI_DISK must be set to the disk model used across all the nodes (e.g. WD_BLACK SN770)
    cmds:
      - bash {{.SCRIPTS_DIR}}/bootstrap-apps.sh
    vars:
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info --output json | jq --raw-output '.endpoints[]'
    env:
      CSI_DISK: '{{.CSI_DISK}}'
      CLUSTER: '{{.CLUSTER}}'
      CLUSTER_APPS: '{{.CLUSTER_APPS}}'
      CLUSTER_DIR: '{{.CLUSTER_DIR}}'
      SHARED_APPS: '{{.SHARED_APPS}}'
      SHARED_DIR: '{{.SHARED_DIR}}'
    requires:
      vars: [CLUSTER, CSI_DISK]
    preconditions:
      - op whoami --format=json
      - talosctl --talosconfig {{.TALOS_DIR}}/talosconfig config info
      - test -f {{.TALOS_DIR}}/talosconfig
      - test -f {{.SCRIPTS_DIR}}/bootstrap-apps.sh
