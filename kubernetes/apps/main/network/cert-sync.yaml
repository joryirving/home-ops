---
---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name cert-sync
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    template:
      type: kubernetes.io/ssh-auth
      data:
        ssh-privatekey: "{{ .SSH_PRIVATE_KEY }}"
  dataFrom:
  - extract:
      key: voyager
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-sync
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cert-sync
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cert-sync
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-sync
subjects:
  - kind: ServiceAccount
    name: cert-sync
    namespace: network
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: caddy-cert-sync
  namespace: network
spec:
  # Run once per day at midnight (adjust as needed)
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cert-sync
          restartPolicy: OnFailure
          containers:
            - name: cert-sync
              image: alpine:3.22
              env:
                - name: TLS_CERT
                  value: jory-dev-tls
                - name: TLS_NAMESPACE
                  value: network
                - name: SERVER
                  value: root@voyager
                - name: DIR
                  value: /mnt/user/docker/CaddyV2/data/certificates
              volumeMounts:
                - name: ssh-key
                  mountPath: /root/.ssh
                  readOnly: true
              command:
                - /bin/sh
                - -c
                - |
                  # Install required tools at runtime
                  apk add --no-cache bash openssh-client curl jq

                  # Install kubectl
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x kubectl
                  mv kubectl /usr/local/bin/

                  set -euo pipefail
                  CERT_DIR="/tmp/cert"
                  mkdir -p "$CERT_DIR"

                  cp /root/.ssh/id_rsa /tmp/id_rsa
                  sed -i -e '$a\' /tmp/id_rsa
                  chmod 600 /tmp/id_rsa

                  # Grab secret
                  kubectl get secret "$TLS_CERT" -n "$TLS_NAMESPACE" -ojsonpath="{.data.tls\.crt}" | base64 -d > "$CERT_DIR/certificate.crt"
                  kubectl get secret "$TLS_CERT" -n "$TLS_NAMESPACE" -ojsonpath="{.data.tls\.key}" | base64 -d > "$CERT_DIR/certificate.key"

                  scp -i /tmp/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$CERT_DIR/certificate.crt" "$SERVER:$DIR/wildcard.crt"
                  scp -i /tmp/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$CERT_DIR/certificate.key" "$SERVER:$DIR/wildcard.key"
                  ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$SERVER" "docker restart CaddyV2 || true"
                  echo "Certificate updated and CaddyV2 restarted"
          volumes:
            - name: ssh-key
              secret:
                secretName: cert-sync
                defaultMode: 0600
                items:
                  - key: ssh-privatekey
                    path: id_rsa
